{"version":3,"sources":["axios.js","components/Row.js","UI/Button.js","request.js","components/Banner.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","base_url","Row","title","dataUrl","isLargeRow","useState","movies","sertMovies","trailerUrl","setTrailerUrl","useEffect","get","then","res","data","results","catch","err","console","log","message","className","map","movie","key","id","onClick","movieTrailer","name","url","urlParams","URLSearchParams","URL","search","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","Button","children","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundPosition","backgroundImage","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.86fb7037.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport const base_url = \"https://image.tmdb.org/t/p/original/\";\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios, { base_url } from \"../axios\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\n// Style\nimport \"./Row.css\";\n\nfunction Row({ title, dataUrl, isLargeRow }) {\n  const [movies, sertMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    // A snippet of code which runs based on a specific condition\n    axios\n      .get(dataUrl)\n      .then((res) => {\n        sertMovies(res.data.results);\n      })\n      .catch((err) => {\n        console.log(\"ERROR >>> \", err.message);\n      });\n    // if [] , run once when the row loads, and dont ru again\n    // if [prop] , run every time the (prop) updated\n  }, [dataUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__container\">\n        {movies?.map((movie) => (\n          <img\n            className={`row__containerImg ${isLargeRow && \"row__largeRow\"}`}\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","import React from \"react\";\nimport \"./Button.css\";\nconst Button = ({ children }) => <button className=\"button\">{children}</button>;\nexport default Button;\n","const API_KEY = \"614040f22341dda85ba6409b468ed377\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios, { base_url } from \"../axios\";\nimport Button from \"../UI/Button\";\nimport requests from \"../request\";\n\n// Style\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(requests.fetchNetflixOriginals)\n      .then((res) => {\n        setMovie(\n          res.data.results[\n            Math.floor(Math.random() * res.data.results.length - 1)\n          ]\n        );\n      })\n      .catch((err) => {\n        console.log(\"ERROR >>>>\", err.message);\n      });\n  }, []);\n\n  const truncate = (str, n) => {\n    return str?.length > n ? `${str.substr(0, n - 1)}...` : str;\n  };\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundPosition: \"top\",\n        backgroundImage: `linear-gradient(to bottom, rgba(0,0,0,.5), rgba(0,0,0,.1)), url('${base_url}${movie?.backdrop_path}')`,\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__btns\">\n          <Button>Play</Button>\n          <Button>My List</Button>\n        </div>\n        <p className=\"banner__description\">{truncate(movie?.overview, 100)}</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\n\n// Style\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <div className={`navbar ${show && \"navbar--black\"}`}>\n      <img\n        className=\"navbar__logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix logo\"\n      />\n      <img\n        className=\"navbar__avatar\"\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n        alt=\"Smiley face\"\n      />\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport Row from \"./components/Row\";\nimport Banner from \"./components/Banner\";\nimport Navbar from \"./components/Navbar\";\nimport requests from \"./request\";\n\n// Style\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    // Let's use BEM convention\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row\n        title=\"Netflix originals\"\n        dataUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Movies\" dataUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" dataUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" dataUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" dataUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" dataUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" dataUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" dataUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}